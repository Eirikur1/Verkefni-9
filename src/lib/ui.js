import { getLaunch, searchLaunches } from './api.js';
import { el } from './elements.js';

/**
 * B√Ωr til leitarform.
 * @param {(e: SubmitEvent) => void} searchHandler Fall sem keyrt er √æegar leita√∞ er.
 * @param {string | undefined} query Leitarstrengur.
 * @returns {HTMLElement} Leitarform.
 */
export function renderSearchForm(searchHandler, query = undefined) {
  const form = el(
  'form', 
  {},
  el('input', {value: query ?? '', name: 'query' }), 
  el('button', {}, 'leita') 
  );

  form.addEventListener('submit', searchHandler);

  return form;
}

/**
 * Setur ‚Äûloading state‚Äú skilaba√∞ me√∞an g√∂gn eru s√≥tt.
 * @param {HTMLElement} parentElement Element sem √° a√∞ birta skilbao√∞ √≠.
 * @param {Element | undefined} searchForm Leitarform sem √° a√∞ gera √≥virkt.
 */
function setLoading(parentElement, searchForm = undefined) {
  /* TODO √∫tf√¶ra */
}

/**
 * Fjarl√¶gir ‚Äûloading state‚Äú.
 * @param {HTMLElement} parentElement Element sem inniheldur skilabo√∞.
 * @param {Element | undefined} searchForm Leitarform sem √° a√∞ gera virkt.
 */
function setNotLoading(parentElement, searchForm = undefined) {
  /* TODO √∫tf√¶ra */
}

/**
 * Birta ni√∞urst√∂√∞ur √∫r leit.
 * @param {import('./api.types.js').Launch[] | null} results Ni√∞urst√∂√∞ur √∫r leit
 * @param {string} query Leitarstrengur.
 */
function createSearchResults(results, query) {
 
  if (!results) {
    const noResultsElement = el(
    'li', 
    {}, 
    `villa vi√∞ leit a√∞ ${query}`
    );
    list.appendChild(noResultsElement);
    return list;
  }
  const list = el('ul', { class: 'search-results'});

if (results.length === 0) {
  const noResultsElement = el(
    'li',
     {},
     `Engar ni√∞urst√∂√∞ur fyrir leit a√∞ ${query}`
  );
    list.appendChild(noResultsElement)
    return list;
}


for (const result of resaults) {
    const resultElement = el(
      'li',
      { class: 'search-result' },
      el('span', { class : 'name' }, result.name ),
      el('span', { class: 'mission'}, result.mission)
    );
      list.appendChild(resultElement);
        return list;
  }

}

/**
 *
 * @param {HTMLElement} parentElement Element sem √° a√∞ birta ni√∞urst√∂√∞ur √≠.
 * @param {Element} searchForm Form sem √° a√∞ gera √≥virkt.
 * @param {string} query Leitarstrengur.
 */
export async function searchAndRender(parentElement, searchForm, query) {
    parentElement.appendChild(el('p,', {},`Leita a√∞ ${query}`));
    
const ButtonElement = searchForm.querySelector('button');
if (ButtonElement){
  ButtonElement.setAttribute('disabled', 'disabled');
}
    const result = await searchLaunches(query);
    if(ButtonElement) {
      ButtonElement.setAttribute('disable', '');
    }

    const searchResultsElement = createSearchResults(results, query);

    parentElement.appendChild(searchResultsElement); 
}

/**
 * S√Ωna fors√≠√∞u, hugsanlega me√∞ leitarni√∞urst√∂√∞um.
 * @param {HTMLElement} parentElement Element sem √° a√∞ innihalda fors√≠√∞u.
 * @param {(e: SubmitEvent) => void} searchHandler Fall sem keyrt er √æegar leita√∞ er.
 * @param {string | undefined} query Leitaror√∞, ef eitthva√∞, til a√∞ s√Ωna ni√∞urst√∂√∞ur fyrir.
 */
export function renderFrontpage(
  parentElement,
  searchHandler,
  query = undefined,
) {
  const heading = el(
   'h1',
    { class: 'heading', 'data-foo': 'bar' },
      'Geimskotaleitin üöÄ',
      el('span', {},)
      );

  const searchForm = renderSearchForm(searchHandler, query);
  
  
  console.log(heading, searchForm);


  const container = el('main', {}, heading, searchForm);
  parentElement.appendChild(container);

  if (!query) {
    return;
  }

  searchAndRender(parentElement, searchForm, query);
}

/**
 * S√Ωna geimskot.
 * @param {HTMLElement} parentElement Element sem √° a√∞ innihalda geimskot.
 * @param {string} id Au√∞kenni geimskots.
 */
export async function renderDetails(parentElement, id) {
  const container = el('main', {});
  const backElement = el(
    'div',
    { class: 'back' },
    el('a', { href: '/' }, 'Til baka'),
  );

  parentElement.appendChild(container);

  /* TODO setja loading state og s√¶kja g√∂gn */

  // T√≥mt og villu state, vi√∞ gerum ekki greinarmun √° √æessu tvennu, ef vi√∞
  // myndum vilja gera √æa√∞ √æyrftum vi√∞ a√∞ skilgreina st√∂√∞u fyrir ni√∞urst√∂√∞u
  if (!result) {
    /* TODO √∫tf√¶ra villu og t√≥mt state */
  }

  /* TODO √∫tf√¶ra ef g√∂gn */
}
